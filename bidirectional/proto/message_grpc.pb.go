// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: message.proto

package grpcStreaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BidirectionalMessageClient is the client API for BidirectionalMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidirectionalMessageClient interface {
	StreamMessage(ctx context.Context, opts ...grpc.CallOption) (BidirectionalMessage_StreamMessageClient, error)
}

type bidirectionalMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewBidirectionalMessageClient(cc grpc.ClientConnInterface) BidirectionalMessageClient {
	return &bidirectionalMessageClient{cc}
}

func (c *bidirectionalMessageClient) StreamMessage(ctx context.Context, opts ...grpc.CallOption) (BidirectionalMessage_StreamMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &BidirectionalMessage_ServiceDesc.Streams[0], "/protobuf.BidirectionalMessage/StreamMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &bidirectionalMessageStreamMessageClient{stream}
	return x, nil
}

type BidirectionalMessage_StreamMessageClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type bidirectionalMessageStreamMessageClient struct {
	grpc.ClientStream
}

func (x *bidirectionalMessageStreamMessageClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidirectionalMessageStreamMessageClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidirectionalMessageServer is the server API for BidirectionalMessage service.
// All implementations must embed UnimplementedBidirectionalMessageServer
// for forward compatibility
type BidirectionalMessageServer interface {
	StreamMessage(BidirectionalMessage_StreamMessageServer) error
	mustEmbedUnimplementedBidirectionalMessageServer()
}

// UnimplementedBidirectionalMessageServer must be embedded to have forward compatible implementations.
type UnimplementedBidirectionalMessageServer struct {
}

func (UnimplementedBidirectionalMessageServer) StreamMessage(BidirectionalMessage_StreamMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessage not implemented")
}
func (UnimplementedBidirectionalMessageServer) mustEmbedUnimplementedBidirectionalMessageServer() {}

// UnsafeBidirectionalMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidirectionalMessageServer will
// result in compilation errors.
type UnsafeBidirectionalMessageServer interface {
	mustEmbedUnimplementedBidirectionalMessageServer()
}

func RegisterBidirectionalMessageServer(s grpc.ServiceRegistrar, srv BidirectionalMessageServer) {
	s.RegisterService(&BidirectionalMessage_ServiceDesc, srv)
}

func _BidirectionalMessage_StreamMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidirectionalMessageServer).StreamMessage(&bidirectionalMessageStreamMessageServer{stream})
}

type BidirectionalMessage_StreamMessageServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type bidirectionalMessageStreamMessageServer struct {
	grpc.ServerStream
}

func (x *bidirectionalMessageStreamMessageServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidirectionalMessageStreamMessageServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidirectionalMessage_ServiceDesc is the grpc.ServiceDesc for BidirectionalMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BidirectionalMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.BidirectionalMessage",
	HandlerType: (*BidirectionalMessageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessage",
			Handler:       _BidirectionalMessage_StreamMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
