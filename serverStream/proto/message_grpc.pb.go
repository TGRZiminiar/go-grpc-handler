// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: message.proto

package grpcStreaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerStreamingClient is the client API for ServerStreaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerStreamingClient interface {
	StreamMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServerStreaming_StreamMessageClient, error)
}

type serverStreamingClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStreamingClient(cc grpc.ClientConnInterface) ServerStreamingClient {
	return &serverStreamingClient{cc}
}

func (c *serverStreamingClient) StreamMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServerStreaming_StreamMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerStreaming_ServiceDesc.Streams[0], "/protobuf.ServerStreaming/StreamMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamingStreamMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStreaming_StreamMessageClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type serverStreamingStreamMessageClient struct {
	grpc.ClientStream
}

func (x *serverStreamingStreamMessageClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamingServer is the server API for ServerStreaming service.
// All implementations must embed UnimplementedServerStreamingServer
// for forward compatibility
type ServerStreamingServer interface {
	StreamMessage(*Request, ServerStreaming_StreamMessageServer) error
	mustEmbedUnimplementedServerStreamingServer()
}

// UnimplementedServerStreamingServer must be embedded to have forward compatible implementations.
type UnimplementedServerStreamingServer struct {
}

func (UnimplementedServerStreamingServer) StreamMessage(*Request, ServerStreaming_StreamMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessage not implemented")
}
func (UnimplementedServerStreamingServer) mustEmbedUnimplementedServerStreamingServer() {}

// UnsafeServerStreamingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerStreamingServer will
// result in compilation errors.
type UnsafeServerStreamingServer interface {
	mustEmbedUnimplementedServerStreamingServer()
}

func RegisterServerStreamingServer(s grpc.ServiceRegistrar, srv ServerStreamingServer) {
	s.RegisterService(&ServerStreaming_ServiceDesc, srv)
}

func _ServerStreaming_StreamMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamingServer).StreamMessage(m, &serverStreamingStreamMessageServer{stream})
}

type ServerStreaming_StreamMessageServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type serverStreamingStreamMessageServer struct {
	grpc.ServerStream
}

func (x *serverStreamingStreamMessageServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// ServerStreaming_ServiceDesc is the grpc.ServiceDesc for ServerStreaming service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerStreaming_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ServerStreaming",
	HandlerType: (*ServerStreamingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessage",
			Handler:       _ServerStreaming_StreamMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
