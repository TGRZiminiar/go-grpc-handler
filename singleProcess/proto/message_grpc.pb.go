// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: message.proto

package grpcStreaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SingleMessageClient is the client API for SingleMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SingleMessageClient interface {
	OneMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type singleMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewSingleMessageClient(cc grpc.ClientConnInterface) SingleMessageClient {
	return &singleMessageClient{cc}
}

func (c *singleMessageClient) OneMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.SingleMessage/OneMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SingleMessageServer is the server API for SingleMessage service.
// All implementations must embed UnimplementedSingleMessageServer
// for forward compatibility
type SingleMessageServer interface {
	OneMessage(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedSingleMessageServer()
}

// UnimplementedSingleMessageServer must be embedded to have forward compatible implementations.
type UnimplementedSingleMessageServer struct {
}

func (UnimplementedSingleMessageServer) OneMessage(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneMessage not implemented")
}
func (UnimplementedSingleMessageServer) mustEmbedUnimplementedSingleMessageServer() {}

// UnsafeSingleMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SingleMessageServer will
// result in compilation errors.
type UnsafeSingleMessageServer interface {
	mustEmbedUnimplementedSingleMessageServer()
}

func RegisterSingleMessageServer(s grpc.ServiceRegistrar, srv SingleMessageServer) {
	s.RegisterService(&SingleMessage_ServiceDesc, srv)
}

func _SingleMessage_OneMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SingleMessageServer).OneMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.SingleMessage/OneMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SingleMessageServer).OneMessage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SingleMessage_ServiceDesc is the grpc.ServiceDesc for SingleMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SingleMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.SingleMessage",
	HandlerType: (*SingleMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OneMessage",
			Handler:    _SingleMessage_OneMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
